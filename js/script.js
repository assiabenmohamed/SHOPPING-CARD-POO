// Classe repr√©sentant un produit avec un identifiant, un nom et un prix
class Product {
  constructor(id, name, price) {
    this.id = id;
    this.name = name;
    this.price = price;
  }
}
// Classe repr√©sentant un article dans le panier (produit + quantit√©)
class shoppingcartitem {
  constructor(Product, quantity) {
    this.Product = Product;
    this.quantity = quantity;
  }
  // Calcul du prix total d'un article en fonction de la quantit√©
  totalprice() {
    return this.Product.price * this.quantity;
  }
}
// Classe repr√©sentant le panier d'achat
class shoppingcart {
  constructor() {
    this.items = []; // Tableau contenant les articles du panier
  }
  // Ajoute un produit au panier ou incr√©mente sa quantit√© s'il est d√©j√† pr√©sent
  addItems(product) {
    let existingItem = this.items.find(
      (item) => item.Product.id === product.id
    );
    if (existingItem) {
      existingItem.quantity++; // Incr√©mente la quantit√© si le produit est d√©j√† dans le panier
    } else {
      this.items.push(new shoppingcartitem(product, 1)); // Ajoute un nouvel article si le produit n'est pas encore pr√©sent
    }
    this.updateTotalPrice(); // Met √† jour le prix total affich√©
    this.updateUI(); // Met √† jour l'affichage des quantit√©s
  }
  // Supprime un produit du panier en filtrant les √©l√©ments qui ne correspondent pas √† l'ID du produit
  removeItems(product) {
    console.log(product.id);
    let temp = this.items.filter((item) => item.Product.id !== product.id);
    this.items = temp;
    console.log(this.items);
    this.removeUi(); // Supprime l'affichage du produit dans l'interface
    this.updateTotalPrice(); // Met √† jour le prix total affich√©
  }
  // Modifie la quantit√© d'un produit dans le panier (incr√©mentation ou d√©cr√©mentation)
  updateQuantity(product, increment = true) {
    let existingItem = this.items.find(
      (item) => item.Product.id === product.id
    );
    if (existingItem && existingItem.quantity > 0) {
      existingItem.quantity = increment
        ? existingItem.quantity + 1 // Augmente la quantit√© si "increment" est vrai
        : existingItem.quantity - 1; // Diminue la quantit√© sinon
    }
    this.updateTotalPrice(); // Met √† jour le prix total affich√©
    this.updateUI(); // Met √† jour l'affichage des quantit√©s
  }
  // Calcule et retourne le prix total du panier
  getTotalPrice() {
    let s = 0;
    for (let i = 0; i < this.items.length; i++) {
      s += this.items[i].totalprice(); // Additionne les prix de chaque article du panier
    }
    return s;
  }
  // Met √† jour l'affichage du prix total dans la page HTML
  updateTotalPrice() {
    document.querySelector(".total").textContent = this.getTotalPrice() + " $";
  }
  // Met √† jour l'affichage des quantit√©s des produits dans l'interface utilisateur
  updateUI() {
    document.querySelectorAll(".fa-plus-circle").forEach((btn, index) => {
      const product = products[index];
      let cartItem = this.items.find((item) => item.Product.id === product.id);
      btn.nextElementSibling.textContent = cartItem ? cartItem.quantity : 0; // Met √† jour la quantit√© affich√©e
    });
  }
  // Supprime visuellement un √©l√©ment du panier dans l'interface utilisateur
  removeUi() {
    document.querySelectorAll(".fa-trash-alt").forEach((btn) => {
      btn.addEventListener("click", function () {
        const itemElement = btn.closest(".card"); // Trouve l'√©l√©ment HTML parent correspondant
        if (itemElement) {
          itemElement.remove(); // Supprime uniquement cet √©l√©ment de l'affichage
        }
      });
    });
  }
}

// Cr√©ation d'une instance du panier
const cart = new shoppingcart();

// D√©finition des produits disponibles
const products = [
  new Product(1, "Baskets", 100),
  new Product(2, "Socks", 20),
  new Product(3, "Bag", 50),
];
// Ajout des √©couteurs d'√©v√©nements apr√®s le chargement du DOM
document.addEventListener("DOMContentLoaded", function () {
  // G√®re l'ajout d'un produit au panier lors du clic sur l'ic√¥ne "+"
  document.querySelectorAll(".fa-plus-circle").forEach((btn, index) => {
    btn.addEventListener("click", () => cart.addItems(products[index]));
  });
  // G√®re la diminution de la quantit√© d'un produit au clic sur l'ic√¥ne "-"
  document.querySelectorAll(".fa-minus-circle").forEach((btn, index) => {
    btn.addEventListener("click", () =>
      cart.updateQuantity(products[index], false)
    );
  });
  // G√®re la suppression d'un produit au clic sur l'ic√¥ne "üóëÔ∏è"
  document.querySelectorAll(".fa-trash-alt").forEach((btn, index) => {
    btn.addEventListener("click", () => cart.removeItems(products[index]));
  });
});
